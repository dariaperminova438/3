def bubble_sort(arr):
    """
    Функция для сортировки массива методом пузырька
    """
    # Получаем длину массива
    n = len(arr)
    
    # Внешний цикл: проходим по всем элементам массива
    # Количество итераций = n-1, так как последний элемент автоматически займет свое место
    for i in range(n - 1):
        
        # Внутренний цикл: проходим по неотсортированной части массива
        # После каждой итерации внешнего цикла самый большой элемент "всплывает" в конец,
        # поэтому каждый раз можно проверять на один элемент меньше
        for j in range(0, n - i - 1):
            
            # Сравниваем текущий элемент со следующим
            # Если текущий элемент больше следующего - меняем их местами
            if arr[j] > arr[j + 1]:
                
                # Обмен элементов местами с использованием кортежей
                # Эквивалентно:
                # temp = arr[j]
                # arr[j] = arr[j + 1]
                # arr[j + 1] = temp
                arr[j], arr[j + 1] = arr[j + 1], arr[j]


def optimized_bubble_sort(arr):
    """
    Оптимизированная версия пузырьковой сортировки
    с проверкой на отсортированность
    """
    n = len(arr)
    
    # Внешний цикл
    for i in range(n - 1):
        
        # Флаг для отслеживания, были ли обмены на текущей итерации
        swapped = False
        
        # Внутренний цикл
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                # Обмен элементов
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                # Устанавливаем флаг, что был хотя бы один обмен
                swapped = True
        
        # Если на всей итерации не было ни одного обмена,
        # значит массив уже отсортирован - выходим из цикла
        if not swapped:
            break


# Пример использования
if __name__ == "__main__":
    # Создаем тестовый массив
    test_array = [64, 34, 25, 12, 22, 11, 90]
    
    # Выводим исходный массив
    print("Исходный массив:", test_array)
    
    # Копируем массив для демонстрации обеих версий
    array1 = test_array.copy()
    array2 = test_array.copy()
    
    # Сортируем обычной версией
    bubble_sort(array1)
    print("Обычная пузырьковая сортировка:", array1)
    
    # Сортируем оптимизированной версией
    optimized_bubble_sort(array2)
    print("Оптимизированная пузырьковая сортировка:", array2)
