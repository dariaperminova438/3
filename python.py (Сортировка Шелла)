def shell_sort(arr):
    """
    Функция для сортировки массива методом Шелла
    """
    # Получаем длину массива
    n = len(arr)
    
    # Начальный промежуток (gap) берем как половину длины массива
    # и последовательно уменьшаем его в 2 раза на каждой итерации
    gap = n // 2
    
    # Продолжаем пока промежуток больше 0
    while gap > 0:
        
        # Применяем сортировку вставками для элементов на расстоянии gap
        for i in range(gap, n):
            # Сохраняем текущий элемент для последующей вставки
            temp = arr[i]
            
            # Сохраняем индекс текущего элемента для использования во внутреннем цикле
            j = i
            
            # Сдвигаем элементы, которые больше temp, вправо
            # Сравниваем элементы на расстоянии gap
            while j >= gap and arr[j - gap] > temp:
                # Сдвигаем элемент на gap позиций вправо
                arr[j] = arr[j - gap]
                # Переходим к следующему элементу слева на расстоянии gap
                j -= gap
            
            # Вставляем сохраненный элемент на правильную позицию
            arr[j] = temp
        
        # Уменьшаем промежуток в 2 раза для следующей итерации
        gap //= 2


def optimized_shell_sort(arr):
    """
    Оптимизированная версия сортировки Шелла с последовательностью Кнута
    """
    n = len(arr)
    
    # Вычисляем начальный промежуток по последовательности Кнута
    gap = 1
    while gap < n // 3:
        gap = 3 * gap + 1  # 1, 4, 13, 40, 121, ...
    
    # Применяем сортировку с уменьшающимся промежутком
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        
        # Уменьшаем промежуток для последовательности Кнута
        gap //= 3


# Функция для вывода массива
def print_array(arr):
    """Выводит элементы массива через пробел"""
    print(" ".join(map(str, arr)))


# Пример использования
if __name__ == "__main__":
    # Тестовый массив
    test_array = [12, 34, 54, 2, 3, 1, 89, 45, 23]
    
    print("Исходный массив:")
    print_array(test_array)
    
    # Копируем массив для демонстрации обеих версий
    array1 = test_array.copy()
    array2 = test_array.copy()
    
    # Сортируем обычной версией
    shell_sort(array1)
    print("\nОбычная сортировка Шелла:")
    print_array(array1)
    
    # Сортируем оптимизированной версией
    optimized_shell_sort(array2)
    print("Оптимизированная сортировка Шелла (Кнута):")
    print_array(array2)
