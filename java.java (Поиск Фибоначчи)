public class FibonacciSearch {
    
    public static int fibonacciSearch(int[] arr, int x) {
        int n = arr.length;
        
        // Инициализация чисел Фибоначчи
        int fibMMm2 = 0;  // F(m-2)
        int fibMMm1 = 1;  // F(m-1)
        int fibM = fibMMm2 + fibMMm1;  // F(m)
        
        // Находим наименьшее число Фибоначчи, большее или равное n
        while (fibM < n) {
            fibMMm2 = fibMMm1;
            fibMMm1 = fibM;
            fibM = fibMMm2 + fibMMm1;
        }
        
        // Смещение для отслеживания текущей позиции
        int offset = -1;
        
        // Основной цикл поиска
        while (fibM > 1) {
            // Вычисляем индекс для проверки (ограничиваясь размером массива)
            int i = Math.min(offset + fibMMm2, n - 1);
            
            // Если x больше элемента в позиции i - ищем в правой части
            if (arr[i] < x) {
                fibM = fibMMm1;
                fibMMm1 = fibMMm2;
                fibMMm2 = fibM - fibMMm1;
                offset = i;
            }
            // Если x меньше элемента в позиции i - ищем в левой части
            else if (arr[i] > x) {
                fibM = fibMMm2;
                fibMMm1 = fibMMm1 - fibMMm2;
                fibMMm2 = fibM - fibMMm1;
            }
            // Элемент найден
            else {
                return i;
            }
        }
        
        // Проверяем последний оставшийся элемент
        if (fibMMm1 == 1 && offset + 1 < n && arr[offset + 1] == x) {
            return offset + 1;
        }
        
        // Элемент не найден
        return -1;
    }
}
